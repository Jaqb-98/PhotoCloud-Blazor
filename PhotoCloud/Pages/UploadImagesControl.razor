@inherits BaseComponent
@inject IPhotoService PhotoService
@inject NavigationManager NavigationManager

<p>
    <button class="btn btn-primary collapsible" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
        Upload pictures
    </button>
</p>
<section class="collapse" id="collapseExample">
    <form @onsubmit="OnSubmit">
        <div class="input-group mb-3">
            <label class="input-group-text" for="inputPhotos">Upload</label>
            <InputFile OnChange="@OnInputFileChange" class="form-control" id="inputPhotos" multiple />
        </div>



        @if (SelectedImageDataUrls?.Count > 0)
        {
            <h4>Selected Images</h4>
            <div class="card" style="width:30rem;">
                <div class="card-body">
                    @foreach (var imageDataUrl in SelectedImageDataUrls)
                    {
                        <img class="rounded m-1" src="@imageDataUrl" />
                    }
                </div>
            </div>
        }
        <button type="submit" class="btn btn-primary" disabled="@(browserFiles.Count <=0)">Submit</button>
    </form>
</section>

@code {
    private IList<string> SelectedImageDataUrls = new List<string>();
    private List<IBrowserFile> browserFiles = new List<IBrowserFile>();


    [Parameter]
    public EventCallback OnSubmitCallback { get; set; }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var maxAllowedFiles = 20;
        var format = "image/jpg";

        foreach (var image in e.GetMultipleFiles(maxAllowedFiles))
        {
            var resizedImageFile = await image.RequestImageFileAsync(format, 100, 100);

            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);

            var imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";

            SelectedImageDataUrls.Add(imageDataUrl);
            browserFiles.Add(image);
        }
    }

    private async Task OnSubmit()
    {
        foreach (var browserFile in browserFiles)
        {
            var buffer = new byte[browserFile.Size];
            await browserFile.OpenReadStream(browserFile.Size).ReadAsync(buffer);
            await PhotoService.AddPhoto(UserId, buffer);

        }


        SelectedImageDataUrls.Clear();
        browserFiles.Clear();
        await OnSubmitCallback.InvokeAsync();
    }

    public void Refresh()
    {
        this.StateHasChanged();
    }



}
