@page "/album/{AlbumId}"

@inherits BaseComponent
@inject IPhotoService PhotoService
@inject IState State
@inject NotifierService Notifier
@inject NavigationManager NavigationManager

@if (!String.IsNullOrEmpty(albumname))
{
    <h4>@albumname</h4>
}
else
{
    <h4>Your photos</h4>
}
<section id="PhotosSection">
    <div id="yourPhotos">
        <div id="lightgallery">
            @if (usersImages != null)
            {

                @if (selectable)
                {

                    @foreach (var photo in usersImages)
                    {
                        <input type="checkbox" id="@photo.Id" @onchange="@((e)=> SelectPhoto(photo.Id,e.Value))" value="@photo.Id" />
                        <label for="@photo.Id">
                            <img src="/images/@photo.Id" />
                        </label>
                    }


                }
                else
                {

                    @foreach (var photo in usersImages)
                    {
                        <a href="/images/@photo.Id" data-lightbox="photos">
                            <img src="/images/@photo.Id" />
                        </a>
                    }

                }
            }

        </div>

    </div>
</section>
<hr />
<section id="actions">
    <div class="row">
        <div class="col">
            <button @onclick="SelectImages" type="button" class="btn btn-primary" style="position: absolute; bottom: 0;">Select</button>

        </div>
        <div class="col">
            @if (selectable)
            {
                <button @onclick="AddPhotos" type="button" class="btn btn-primary" style="position: absolute; bottom: 0;">Add to album</button>
            }
        </div>
    </div>
</section>

@code {

    private ICollection<PhotoModel> usersImages;
    public List<string> SelectedPhotos { get; set; } = new List<string>();

    private bool selectable = false;

    [Parameter]
    public string AlbumId { get; set; } = null;

    private string albumname = String.Empty;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (AlbumId == null)
        {

            if (User.Identity.IsAuthenticated)
                usersImages = await PhotoService.GetUsersPhotos(UserId);
        }
        else
        {
            usersImages = await PhotoService.GetAlbumPhotos(AlbumId);
            albumname = await PhotoService.GetAlbumName(AlbumId);
        }

    }

    private void SelectImages()
    {
        selectable = !selectable;
        SelectedPhotos.Clear();
    }

    private void SelectPhoto(string photoId, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!SelectedPhotos.Contains(photoId))
            {
                SelectedPhotos.Add(photoId);
            }
        }
        else
        {
            if (SelectedPhotos.Contains(photoId))
            {
                SelectedPhotos.Remove(photoId);
            }
        }
    }

    public async Task Refresh()
    {
        this.StateHasChanged();
        await OnInitializedAsync();
    }


    private void AddPhotos()
    {
        State.AreImagesSelected = true;
        Notifier.AddToList(SelectedPhotos);
        NavigationManager.NavigateTo("/albums");

    }

}
