@page "/album/{AlbumId}"

@inherits BaseComponent
@inject IPhotoService PhotoService
@inject IState State
@inject NotifierService Notifier
@inject NavigationManager NavigationManager


<AuthorizeView>
    <Authorized>

        <section id="actions">
            <div class="row">
                <div class="col">
                    @if (!String.IsNullOrEmpty(albumname))
                    {
                        <h4>@albumname</h4>
                    }
                    else
                    {
                        <h4>Your photos</h4>
                    }
                </div>
                <div class="col">
                    <button @onclick="SelectImages" type="button" class="btn btn-primary">Select</button>

                </div>
                <div class="col">
                    @if (selectable)
                    {
                        <button @onclick="AddPhotos" type="button" class="btn btn-primary">Add to album</button>
                    }
                </div>
                <div class="col">
                    @if (selectable)
                    {
                        @if (String.IsNullOrEmpty(albumname))
                        {
                            <button @onclick="Delete_Click" type="button" class="btn btn-danger">Delete</button>
                        }
                        else
                        {
                            <button @onclick="Delete_Click" type="button" class="btn btn-danger">Delete from album</button>
                        }
                    }
                </div>

            </div>
        </section>

        <section id="PhotosSection">
            <div id="yourPhotos">
                <div id="lightgallery">
                    @if (usersImages != null)
                    {

                        @if (selectable)
                        {

                            @foreach (var photo in usersImages)
                            {
                                <input type="checkbox" id="@photo.Id" @onchange="@((e)=> SelectPhoto(photo.Id,e.Value))" value="@photo.Id" />
                                <label for="@photo.Id">
                                    <img src="/images/@photo.Id" />
                                </label>
                            }

                        }
                        else
                        {

                            @foreach (var photo in usersImages)
                            {
                                <a href="/images/@photo.Id" data-lightbox="photos">
                                    <img src="/images/@photo.Id" />
                                </a>
                            }

                        }
                    }

                </div>

            </div>
        </section>

        @if (AlbumId == null)
        {
            <section id="navigationPanel">
                <div class="row">
                    <div class="col">
                        <nav aria-label="Page navigation example">
                            <ul class="pagination">
                                <li class="page-item"><button class="page-link" @onclick="PreviousPage" disabled="@(!(--_page >= 1))">Previous</button></li>
                                @for (int i = 1; i <= _pagesCount; i++)
                                {
                                    var page = i;
                                    if (page == _page + 1)
                                    {
                                        <li class="page-item active"><button value="@i" class="page-link" @onclick="(()=>GoToPage(page))">@i</button></li>
                                    }
                                    else
                                    {
                                        <li class="page-item"><button value="@i" class="page-link" @onclick="(()=>GoToPage(page))">@i</button></li>
                                    }
                                }
                                <li class="page-item"><button class="page-link" @onclick="NextPage" disabled="@(!(_page++ < _pagesCount-1))">Next</button></li>
                            </ul>
                        </nav>

                    </div>

                </div>
            </section>
        }

        <Confirm @ref="DeleteConfirmation" ConfirmationChanged="DeletePhotos"></Confirm>
        <hr />


    </Authorized>
    <NotAuthorized>
        <p>Authorized Access Only!</p>
    </NotAuthorized>
</AuthorizeView>


@code {

    private ICollection<PhotoModel> usersImages;
    public List<string> SelectedPhotos { get; set; } = new List<string>();

    private bool selectable = false;


    private int _page = 1;

    private int _pagesCount;

    [Parameter]
    public string AlbumId { get; set; } = null;

    private string albumname = String.Empty;
    protected ConfirmBase DeleteConfirmation { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (User.Identity.IsAuthenticated)
        {
            if (String.IsNullOrEmpty(AlbumId))
            {

                if (User.Identity.IsAuthenticated)
                {
                    usersImages = await PhotoService.GetUsersPhotos(UserId);
                    _pagesCount = await PhotoService.NumberOfPages(UserId);
                }
            }
            else
            {
                usersImages = await PhotoService.GetAlbumPhotos(AlbumId);
                albumname = await PhotoService.GetAlbumName(AlbumId);
            }
        }


    }

    private void SelectImages()
    {
        selectable = !selectable;
        SelectedPhotos.Clear();
    }

    private void SelectPhoto(string photoId, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!SelectedPhotos.Contains(photoId))
            {
                SelectedPhotos.Add(photoId);
            }
        }
        else
        {
            if (SelectedPhotos.Contains(photoId))
            {
                SelectedPhotos.Remove(photoId);
            }
        }
    }

    public async Task Refresh()
    {
        this.StateHasChanged();
        await OnInitializedAsync();
    }


    private void AddPhotos()
    {
        State.AreImagesSelected = true;
        Notifier.AddToList(SelectedPhotos);
        NavigationManager.NavigateTo("/albums");

    }

    protected void Delete_Click()
    {
        DeleteConfirmation.Show();
    }

    private async Task DeletePhotos(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {

            if (String.IsNullOrEmpty(albumname))
                await PhotoService.DeletePhotos(SelectedPhotos);
            else
                await PhotoService.DeletePhotosFromAlbum(AlbumId, SelectedPhotos);

            await OnInitializedAsync();
        }
    }

    private async Task NextPage()
    {
        _page++;
        usersImages = await PhotoService.GetUsersPhotos(UserId, _page - 1);
        this.StateHasChanged();

    }

    private async Task PreviousPage()
    {
        _page--;
        usersImages = await PhotoService.GetUsersPhotos(UserId, _page - 1);
        this.StateHasChanged();
    }

    private async Task GoToPage(int page)
    {
        if (page != _page)
        {
            _page = page;
            usersImages = await PhotoService.GetUsersPhotos(UserId, page - 1);
            this.StateHasChanged();
        }
    }

}
